/*
 * 	Author: Bring IT Devs
 *	Version: 1.0
 *	Date: 1/3/2017
 * 	Bring IT Custom SuiteLet Script added by Edgar Beltr√°n
 *	This Script builds a Future Inventory Snapshot form 
 */ 

function buildFutureInventorySnapshotForm(request, response) 
{
	var executionContext = nlapiGetContext();
	
	var form = nlapiCreateForm('Future Inventory Snapshot Report');
	form.addSubmitButton('Generate Report');
	if(request.getMethod().toUpperCase() == 'POST')
	{
		var scheduleResult = nlapiScheduleScript('customscript_bit_hs_future_inv_snap_ss','customdeploy_bit_hs_future_inv_snap_ss',
				{	'custscript_bit_hs_location':request.getParameter('custpage_location'),
					'custscript_bit_hs_due_date':request.getParameter('custpage_due_date'),
					'custscript_bit_hs_folder_id':executionContext.getSetting('SCRIPT','custscript_bit_hs_reports_folder_id'),
					'custscript_bit_hs_report_status':'In Progress',
					'custscript_bit_hs_report_generated_by':nlapiGetUser()
					});

		var resultGroup = form.addFieldGroup('custpage_result_group', 'Generation Result');
		var uiMessage = form.addField('custpage_message', 'inlinehtml', null, null, 'custpage_result_group');
	
		if(scheduleResult.toUpperCase() == 'QUEUED')
			uiMessage.setDefaultValue("<div id='div__alert' align='center'></div><script>showAlertBox('div__alert', 'Information', 'Report generation In Progress.', NLAlertDialog.TYPE_HIGHEST_PRIORITY,  '100%', null, null, null);</script></div>");	
		else
			uiMessage.setDefaultValue("<div id='div__alert' align='center'></div><script>showAlertBox('div__alert', 'Warning', 'Report could not be generated. Try again.', NLAlertDialog.TYPE_MEDIUM_PRIORITY,  '100%', null, null, null);</script></div>");	
	}
	
	var filterGroup = form.addFieldGroup('custpage_filter_group', 'Available Filters');
	form.addField('custpage_due_date', 'date', 'Due Date', null, 'custpage_filter_group').setMandatory(true);
	form.addField('custpage_location', 'select', 'Location', 'location', 'custpage_filter_group').setMandatory(true);
	
	var reportsGroup = form.addFieldGroup('custpage_report_group', 'Generated Reports');
	
	var reportSubList = form.addSubList('custpage_report_list', 'list', 'Reports');
	reportSubList.addField('custpage_date', 'text', 'Date').setDisplayType('inline');
	reportSubList.addField('custpage_generated_by', 'text', 'Generated By').setDisplayType('inline');
	reportSubList.addField('custpage_location', 'text', 'Location').setDisplayType('inline');
	reportSubList.addField('custpage_due_date', 'text', 'Due Date').setDisplayType('inline');
	reportSubList.addField('custpage_status', 'text', 'Report Status').setDisplayType('inline');
	reportSubList.addField('custpage_download', 'text', 'Report Download').setDisplayType('inline');
	
	var srFutureInventorySnapshot = new Array();
	getFutureInventorySnapshotRecords(srFutureInventorySnapshot, -1);

	var lineItemCnt = 1;
	if(notEmpty(srFutureInventorySnapshot[0]))
	{
		for(var i=srFutureInventorySnapshot.length-1; i>-1; i--)
		{
			for(var j=srFutureInventorySnapshot[i].length-1; j>-1; j--)
			{
				reportSubList.setLineItemValue('custpage_date', lineItemCnt, srFutureInventorySnapshot[i][j].getValue('created'));
				reportSubList.setLineItemValue('custpage_generated_by', lineItemCnt, srFutureInventorySnapshot[i][j].getText('custrecord_bit_hs_generated_by'));
				reportSubList.setLineItemValue('custpage_location', lineItemCnt, srFutureInventorySnapshot[i][j].getText('custrecord_bit_hs_location'));
				reportSubList.setLineItemValue('custpage_due_date', lineItemCnt, srFutureInventorySnapshot[i][j].getValue('custrecord_bit_hs_due_date'));
				reportSubList.setLineItemValue('custpage_status', lineItemCnt, srFutureInventorySnapshot[i][j].getValue('custrecord_bit_hs_report_status'));
				
				if(notEmpty(srFutureInventorySnapshot[i][j].getValue('custrecord_bit_hs_report_file')))
					reportSubList.setLineItemValue('custpage_download', lineItemCnt, '<a href="' + srFutureInventorySnapshot[i][j].getValue('custrecord_bit_hs_report_file') + '">Download</a>');
				else
					reportSubList.setLineItemValue('custpage_download', lineItemCnt, '<a href="#">Not available yet</a>');
				lineItemCnt++;
			}
		}	
	}
	
	var suiteLetUrl = nlapiResolveURL('SUITELET', executionContext.getScriptId(), executionContext.getDeploymentId(), false);
	form.addButton('custpage_btn_reset', 'Reset page', 'window.location.replace(\''+ suiteLetUrl +'\')');   
	response.writePage(form);
}


//This function gets the list of Child Components for a Specified List of Items
function getFutureInventorySnapshotRecords(srArray, maxId)
{
	var futureInventorySnapshotFilters = new Array();
	if(maxId > 0) futureInventorySnapshotFilters.push(new nlobjSearchFilter('internalidnumber', null, 'greaterthan', maxId));
	
	var futureInventorySnapshotColumns = new Array();
	futureInventorySnapshotColumns.push(new nlobjSearchColumn('internalid').setSort());
	futureInventorySnapshotColumns.push(new nlobjSearchColumn('created'));
	futureInventorySnapshotColumns.push(new nlobjSearchColumn('custrecord_bit_hs_generated_by'));
	futureInventorySnapshotColumns.push(new nlobjSearchColumn('custrecord_bit_hs_location'));
	futureInventorySnapshotColumns.push(new nlobjSearchColumn('custrecord_bit_hs_due_date'));
	futureInventorySnapshotColumns.push(new nlobjSearchColumn('custrecord_bit_hs_report_status'));
	futureInventorySnapshotColumns.push(new nlobjSearchColumn('custrecord_bit_hs_report_file'));
	
	var srResults = nlapiSearchRecord('customrecord_bit_hs_future_inv_snapshot', null, futureInventorySnapshotFilters, futureInventorySnapshotColumns); 
	
	if(notEmpty(srResults) && srResults.length > 999)
	{
		srArray.push(srResults);
		getFutureInventorySnapshotRecords(srArray, srResults[srResults.length-1].getId());
	}
	else 
		srArray.push(srResults);
}



//--- General Javascript Functions ---//

function isEmpty(val) {
	return (val == null || val == '' || val == 'null');
}

function notEmpty(tmp) {
	return !isEmpty(tmp);
}